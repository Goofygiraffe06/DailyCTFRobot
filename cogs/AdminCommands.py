# cogs/AdminCommands.py - Contains commands for managing challeges, including challenege setup and shutdown.

import discord
from discord.ext import commands
from .utils import (
    display_leaderboard,
    end_challenge,
    calculate_average_rating,
)
from .db_utils import (
    db_init,
    fetch_config,
    insert_challenge,
    fetch_challenge_data,
    fetch_leaderboard_data,
    remove_challenge_data,
    generate_title
)
import logging
import datetime
from discord.ui import Modal, TextInput
from discord import TextStyle

# Initialize logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s"
)
logging.getLogger("werkzeug").setLevel(logging.ERROR)
logging.getLogger("flask.app").setLevel(logging.ERROR)

# Initialize connection to database
con = db_init()
config = fetch_challenge_data(con)

class AttachmentsButton(discord.ui.View):
    """
    Class that handles the behaviour of the attachment button.
    """
    def __init__(self, attachment_url):
        super().__init__()
        button = discord.ui.Button(
            label="ðŸ“Ž Attachment", style=discord.ButtonStyle.url, url=attachment_url
        )
        self.add_item(button)


# Modal Class to handle the setchallenge

class SetChallengeModal(discord.ui.Modal):
    """
    This class is responsible for structuring the form a.k.a. modal.
    The title of the modal is dynamically generated by a helper function
    in db_utils.py, Which fetches the data from the database for each invoke and displays it.
    """
    def __init__(self, bot, config):
        #super().__init__()
        super().__init__(title=generate_title(con))
        self.bot = bot
        self.config = config

    description_input = discord.ui.TextInput(
        style=discord.TextStyle.long,
        label="Description",
        required=True,
        max_length=2000,
        placeholder="Description of the challenge",
    )

    answer_input = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="Answer",
        required=True,
        placeholder="Answer to the challenge",
    )

    attachment_input = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="Attachment",
        required=False,
        placeholder="Optional: Attach a single URL for files related to the challenge",
    )

    hints_input = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="Hints",
        required=True,
        placeholder="Hints for the challenge",
    )

    writeup_input = discord.ui.TextInput(
        style=discord.TextStyle.long,
        label="Write-up",
        required=False,  # Since it's optional
        max_length=2000,
        placeholder="Optional: Describe how to solve the challenge",
    )

    async def on_submit(self, interaction: discord.Interaction):
        """
        This function is responsible for handling the data that user submits to the form,
        It inserts the data into the database and creates an embed to notify users about new challenge.
        """
        try:
            description = self.description_input.value
            answer = self.answer_input.value
            attachment = self.attachment_input.value
            hints = self.hints_input.value
            writeup = self.writeup_input.value

            insert_challenge(
                con,
                (interaction.user.id, description, answer, attachment, hints, writeup),
            )

            challenge_data = fetch_challenge_data(con)

            # Maybe in the future I will change this to a specific role during setup process
            challenge_ping = "@everyone"

            embed = discord.Embed(title=f"Day: {challenge_data['day']} Challenge")
            embed.add_field(
                name="Description:", value=f"```{challenge_data['description']}```"
            )
            embed.set_footer(text=f"Challenge submitted by {interaction.user.name}")
            challenge_channel = self.bot.get_channel(int(self.config["channel_id"]))

            # idk, for what reason is None reurning false positives ?_?
            if len(challenge_data["attachment"]) == 0:  # if no url is entered, we will not call the AttachmentsButton class
                await challenge_channel.send(challenge_ping)
                await challenge_channel.send(embed=embed)
            else:
                await challenge_channel.send(challenge_ping)
                await challenge_channel.send(
                    embed=embed, view=AttachmentsButton(challenge_data["attachment"])
                )

            await interaction.response.send_message(
                f"Challenge set successfully for Day {challenge_data['day']}!",
                ephemeral=True,
            )

        except Exception as e:
            await interaction.response.send_message(
                f"Failed to set challenge. Please check logs.", ephemeral=True
            )

    async def on_error(self, interaction: discord.Interaction, error: Exception):
        logging.error(f"Error in SetChallengeModal: {error}")
        await interaction.response.send_message(
            f"Failed to set challenge.\nError: {error}", ephemeral=True
        )


class AdminCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        try:
            self.config = fetch_config(con)
        except Exception as e:
            logging.error(f"Error loading config: {e}")

    @discord.app_commands.command(
        name="setchallenge", description="Create a new challenge"
    )
    async def setchallenge(self, interaction: discord.Interaction) -> None:
        """
        Function responsible for the creation of new challenges, handles things like,
        Is user the part of the ctf_creator guild and if the config is empty.
        """
        try:
            self.config = fetch_config(con)

            if self.config is None:
                await interaction.response.send_message(
                    "Failed to fetch config, Did you run `/setup`?", ephemeral=True
                )
                return

            if (
                discord.utils.get(
                    interaction.guild.roles, id=self.config["ctf_creators"]
                )
                in interaction.user.roles
            ):
                modal = SetChallengeModal(self.bot, self.config)
                await interaction.response.send_modal(modal)
            else:
                await interaction.response.send_message(
                    "You don't have permission to set a challenge!", ephemeral=True
                )
        except Exception as e:
            logging.error(f"Error in setchallenge: {e}")
            await interaction.response.send_message(
                "Failed to set challenge. Please check logs.", ephemeral=True
            )

    @discord.app_commands.command(
        name="shutdown", description="Shutdowns active challenge"
    )
    async def shutdown(self, interaction: discord.Interaction) -> None:
        """
        Function responsible for shutting down challenge and displaying neccessary things like,
        printing the database, announcing the answer with average ratings and clearing the database
        """
        try:
            self.config = fetch_config(con)
            self.leaderboard_data = fetch_leaderboard_data(con)
            if self.config is None:
                await interaction.response.send_message(
                    "Failed to fetch config, Did you run `/setup`?"
                )
                return

            if (
                discord.utils.get(
                    interaction.guild.roles, id=int(self.config["ctf_creators"])
                )
                not in interaction.user.roles
            ):
                await interaction.response.send_message(
                    "You don't have permission to shutdown the challenge!",
                    ephemeral=True,
                )
                return

            challenge_data = fetch_challenge_data(con)
            if not challenge_data:
                await interaction.response.send_message(
                    "No active challenge to shut down.", ephemeral=True
                )
                return

            challenge_channel = self.bot.get_channel(
                int(self.config["leaderboard_channel_id"])
            )
            if self.leaderboard_data:
                await display_leaderboard(self.bot)
            else:
                await challenge_channel.send("No one has solved the challenge yet.")

            await challenge_channel.send(
                f"Correct answer for Day-{challenge_data['day']} was: ||`{challenge_data['answer']}`||"
            )
            if challenge_data["writeup"]:
                await challenge_channel.send(
                    f"Official Writeup: {challenge_data['writeup']}"
                )
            else:
                await challenge_channel.send(
                    f"No official writeup for Day-{challenge_data['day']}"
                )
            avg = calculate_average_rating()
            if avg is not None:
                await challenge_channel.send(
                    f"The average rating for the challenge is: {avg:.2f}"
                )
            else:
                await challenge_channel.send("No ratings received for the challenge.")

            remove_challenge_data(con)
            await interaction.response.send_message(
                "Challenge has been shut down and leaderboard has been printed.",
                ephemeral=True,
            )
        except Exception as e:
            logging.error(f"Error in shutdown: {e}")
            await interaction.response.send_message(
                "Failed to shutdown challenge. Please check logs.", ephemeral=True
            )


async def setup(bot) -> None:
    await bot.add_cog(AdminCommands(bot))
